radare2's author is Sergi Alvarez, also known as pancake.
pancake is from Catalonia, Barcelona.
radare2 originated in 2006 as a forensic tool for HFS+ recovery.
The initial radare aimed for portability, 64bit offset handling, and hex pattern searching.
radare2 (r2) was born in 2009 as a refactored, modular version of radare1.
radare2 follows UNIX principles: "everything is a file", small interacting programs.
The r2pipe API allows accessing radare2 via pipes from any language.
radare2 development is managed on GitHub and discussed on Telegram/Discord.
r2con is the annual radare2 community conference, usually held in Barcelona.
what is ESIL? the meaning is Evaluable Strings Intermediate Language.
ESIL is used by radare2 to emulate native code.
radare2 treats executables, disk images, memory dumps, and processes as binary files.
Core radare2 features include hex editing, disassembly, debugging, patching, and scripting.
ACR stands for AutoConfReplacement, a minimalistic autoconf tool used by radare2.
The radare2 GitHub repository is located at radareorg/radare2.
To install radare2 from source, clone the repository and run `sys/install.sh`.
Build issues can sometimes be resolved by cleaning plugin/cache directories (`~/.local/share/radare2/`).
Use `R2_DEBUG=1` environment variable for startup debugging information.
`make purge` can help remove old radare2 installations.
Use `r2 <file>` to open a file in radare2.
Use `r2 -` to open radare2 with a temporary memory buffer (malloc plugin).
Use `r2 -w <file>` to open a file in write mode.
Use `r2 -n <file>` to open a file without parsing headers.
The `-p [prj]` flag creates a project for the analyzed file.
Reopen a file in read-write mode using `oo+`.
Reopen the current binary in debugger mode using `ood`.
Quit radare2 using the `q` command.
Run a script on startup using the `-i` command-line flag.
Load a script or plugin within r2 using `. <script_path>`.
Execute shell commands within r2 using `! <command>`.
Pipe r2 command output to shell commands using `cmd | <shell_cmd>`.
Interpret r2 command output as commands using `.cmd`. Example: `.is*`.
Repeat the last command using `..` or Enter.
Evaluate expressions using `?`. Example: `? 0x10 + 5`.
`$$` represents the current virtual address (seek).
Execute commands at specific offsets using `@`. Example: `px @ 0x1000`.
Iterate commands over multiple offsets using `@@`. Example: `wx ff @@ 10 20 30`.
Seek to an address or symbol using `s <address>`. Example: `s main`.
Seek backward using `s- <num>`. Example: `s- 16`.
Undo the last seek using `s-`.
Redo the last seek using `s+`.
Change the block size (default view size) using `b <size>`. Example: `b 256`.
Print hex dump using `px [<num_bytes>]`.
Print hex dump of words using `pxw [<num_words>]`.
Print disassembled instructions using `pd [<num_instructions>]`.
Print disassembled bytes using `pD [<num_bytes>]`.
Print zero-terminated strings using `pz`.
Print zero-terminated string at offset using `psz [<max_len>] @ <offset>`.
Get file information using `i`.
Get information about the binary format using `iI`.
List entry points using `ie`.
List imports using `ii`.
List linked libraries using `il`.
List sections using `iS`.
List symbols using `is`.
Get the symbol name at the current offset using `is.`.
Extract strings from the data section using `iz`.
Extract strings from the entire binary using `izz`.
Search for strings using `/ <string>`. Example: `/ "password"`.
Search for hex patterns using `/x <hexpairs>`. Example: `/x cafeba.e`.
Search for assembly instructions using `/c <asm_string>`. Example: `/c jmp eax`.
Assemble instructions and search for bytes using `/a <asm_string>`. Example: `/a mov eax, 1`.
Search for ROP gadgets using `/R`.
Define configuration variables using `e <var>=<value>`. Example: `e asm.arch=arm`.
Check configuration variable values using `e <var>`. Example: `e asm.bits`.
Access configuration values in expressions using `${var}`. Example: `? ${asm.bits}`.
Set `asm.pseudo=true` for pseudo-syntax disassembly.
Set `asm.describe=true` for inline opcode descriptions.
Analyze all functions and code blocks using `aa`.
Analyze functions using `af`.
Analyze function at current offset using `af`.
Analyze basic blocks within a function using `afb`.
Analyze data references using `ad`. Example: `ad@rsp`.
List analyzed functions using `afl`.
Rename a function using `afn <new_name> [@<addr>]`.
List cross-references (xrefs) *to* an address using `axt [<addr>]`.
List cross-references (xrefs) *from* an address using `axf [<addr>]`.
View instruction operand details using `ao`.
List flags matching a pattern using `f~<pattern>`. Example: `f~sym`.
List flags in a specific flagspace using `fs <space>; f`. Example: `fs imports; f`.
Enable analysis of consecutive functions using `e anal.hasnext=true`.
Start radare2 in debug mode using `r2 -d <file>`.
Attach to a process using `r2 -d <pid>`.
Step into the next instruction using `ds`.
Step over the next instruction using `dso`.
Continue execution using `dc`.
Set a breakpoint using `db <address>`.
List breakpoints using `db`.
Remove a breakpoint using `db- <address>`.
View register values using `dr`.
View register values and dereferenced pointers using `drr`.
Set `dbg.bep=entry` or `dbg.bep=main` to break at entry/main on start.
Use `dp` to list processes after a fork.
Use `dcf` to continue until a fork occurs.
Enable tracing child processes on fork using `e dbg.follow.child=true`.
Enter visual mode using `V`.
Exit visual mode using `q`.
Rotate visual modes (hex, disasm, etc.) using `p`/`P`.
Toggle cursor mode using `c`.
Move cursor using `hjkl`.
Follow jump/call address using Enter.
Step/Step Over in visual debug mode using `s`/`S`.
Toggle breakpoints using `b`.
Seek to program counter using `.`.
Add/remove comments using `;`.
Rename functions/variables in visual mode using `dr`.
Define functions/data in visual mode using `d`.
Switch between graph and panel views using Spacebar.
Iaito is the official Qt-based GUI for radare2.
`r2pm` is the radare2 package manager.
Install plugins using `r2pm -ci <plugin_name>`. Example: `r2pm -ci r2ghidra`.
The radare2 toolchain includes `rabin2`, `rasm2`, `rax2`, `rahash2`, `radiff2`, `rafind2`.
`rabin2` extracts information from binary files (headers, symbols, sections).
`rasm2` assembles and disassembles code for various architectures.
`rax2` converts between bases and evaluates expressions.
`rahash2` computes hashes and checksums.
`radiff2` compares binary files.
`rafind2` searches for patterns in files.
`r2ghidra` is a decompiler plugin using Ghidra's decompiler engine.
Use `pdg` for r2ghidra decompilation.
r2ghidra quality may differ from native Ghidra due to analysis differences.
`r2dec` is another decompiler plugin available via r2pm.
Use `pdd` for r2dec decompilation.
`pdc` is radare2's built-in pseudo-decompiler.
`pdc` combines ESIL emulation and pseudo-assembly.
`pdc` output can be verbose but works across many architectures.
`decai` is an AI-powered plugin enhancing decompiler output readability.
`decai` often uses `pdc` as a backend and feeds output to an AI model.
`decai` can explain functions (`-x`), find vulnerabilities (`-V`), suggest names (`-n`).
`r2ai` bridges radare2 with AI language models (local or remote).
`r2ai` can run in direct mode (prompt -> AI) or auto mode (AI uses tools like `r2cmd`).
`r2ai-model` is a dataset project for training LLMs about radare2.
The r2ai-model dataset uses a TSV format (Question TAB r2-command-answer).
`r2frida` integrates radare2 with the Frida dynamic instrumentation toolkit.
Use `r2frida` commands starting with `:` (previously `\`).
Trace function calls with `r2frida` using `:dt`.
Format trace output and trace onEnter/onExit using `:dtf`.
Use `:dtf` format specifiers like `z` (string), `c` (char), `x` (hex).
`r2frida` can trace functions by address, import/export names.
Use `:iE` in r2frida to enumerate exports of a loaded module.
Trace specific call destinations found using analysis commands like `/at call`.
`r2yara` integrates YARA rule matching into radare2.
Install `r2yara` using `r2pm -ci r2yara`.
`r2yara` commands start with `yr` or `yara`.
Load YARA rules from a file using `yr <file>`.
Scan the current file with loaded rules using `yrs`.
List loaded YARA rules using `yrl`.
Generate YARA rules interactively using `yrg` subcommands.
Add strings to a generated rule using `yrgs`.
Add hex patterns to a generated rule using `yrgx`.
Add the currently generated rule using `yr+`.
Flatpak releases of Iaito bundle plugins like r2dec, r2ghidra, r2frida, r2yara, decai.
Optimize text for vector databases by using concise, factual statements.
Rephrasing concepts helps improve embedding quality for semantic search.
AI embeddings represent data (like text or code) in a high-dimensional space.
Vector databases efficiently store and retrieve these embeddings.
Embeddings help capture semantic relationships (e.g., King - Man + Woman â‰ˆ Queen).
Use `~<num>` to grep specific columns from command output. Example: `axt sym.main~[1]`.
Use `~..` to view command output in a pager (like less).
Use `~{}` to pretty-print JSON output. Example: `pdfj~{}`.
Use `.radare2rc` file in the home directory for persistent configurations.
Place `.r2` files in a binary's directory for project-specific scripts/settings.
Count the functions found with aflc
